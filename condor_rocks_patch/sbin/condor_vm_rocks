#!/usr/bin/env perl

##**************************************************************
##
## Copyright (C) 2014, Data To Insight Center, Indiana University Bloomington.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************


#
# Rocks VM Control Tool
# V0.1 / 2014-Mar-24 / Yuan Luo / yuanluo@indiana.edu
#

use strict;
use File::Path;
use File::Copy;

# program version information
my $APPNAME = "Rocks VM Control Tool";
my $VERSION = "0.1";
my $verbose = undef;

# Location of "pragma_boot" and "rocks" program
# If these programs are in $PATH, just use basename. Otherwise use a full path
my $vmrun_prog;
my $rockscmd_prog;

# For rocks that using pragma_boot
#$vmrun_prog = 'pragma_boot';
$vmrun_prog = '/opt/pragma_boot/bin/pragma_boot';
$rockscmd_prog = 'rocks';

my $vminfofile = "vm.info";
my $perllog = "condor_vm_rocks.log";

# stdout will be directed to stderr
#open STDOUT, ">&STDERR" or die "Can't dup STDERR: $!";
#select STDERR; $| = 1;  # make unbuffered
#select STDOUT; $| = 1;  # make unbuffered
open OUTPUT, ">&STDOUT";
open STDOUT, ">&STDERR";

my $tmpdir = undef;
my $progname = $0;


if( defined($verbose) ) { print( "Using 'pragma_boot'.\n" ); }

#
# The behavior of vmrun isn't consistent from platform to platform, so we
# have to examine the output to determine if it actually worked.  Note 
# that VMWare Server's implementation of vmrun dies if passed -T, so be
# sure never to do that.
#

sub usage()
{
print STDERR <<EOF;

$APPNAME (version $VERSION)

Usage: $progname command [parameters]

Command      Parameters         Description
list                            List all running VMs
check                           Check if vmware is installed
register     [vmconfig]         Register a VM
unregister   [vmconfig]         Unregister a VM
start        [vmconfig]         Start a VM and print PID
stop         [vmconfig]         Shutdown a VM
killvm       [string]           Kill a VM
suspend      [vmconfig]         Suspend a VM
resume       [vmconfig]         Resume a suspended VM and print PID
status       [vmconfig]         Print the status of a VM
getpid       [vmconfig]         Print PID of VM
getvminfo    [vmconfig]         Print info about VM
snapshot     [vmconfig]         Create a snapshot of a VM
commit       [vmconfig]         Commit COW disks and delete the COW
revert       [vmconfig]         Set VM state to a snapshot
createiso    [listfile] [ISO]   Create an ISO image with files in a listfile
createconfig [configfile]       Modify configuration file created by vm-gahp

Note:
  vmconfig must be an absolute pathname, e.g. /vm/testvm1.vmconf

Examples:
  $progname start /vm/testvm1.vmconf
  $progname status /vm/testvm1.vmconf output.txt

EOF

exit(1);
}

sub printerror
{
	if( defined($tmpdir) ) {
		rmtree("$tmpdir")
			or print STDERR "Cannot delete temporary directory($tmpdir) and files in it";
	}
	print STDERR "(ERROR) @_\n";
	exit(1);
}

sub printwarn
{
	print STDERR "(WARN) @_\n";
}

sub printverbose
{
	if( defined($verbose) ) {
		print STDERR "RocksTool: @_\n";
	}
}

sub checkvmconfig
{
	my $vmconfig = $_[0];
	if( ! defined($vmconfig) ) {
		usage();
	}

	unless( -e $vmconfig ) {
		printerror "vmconfig $vmconfig does not exist";
	}

	unless ( -r $vmconfig ) {
		printerror "vmconfig $vmconfig is not readable";
	}

	return $vmconfig;
}

sub checkregister
{
		my $vcname = $_[0];
	
		chomp(my @vmstatus = `"$rockscmd_prog" -l`);
		# result must be like this
		# /home/condor/rocks/Centos.vmconf
		# /home/condor/rocks/Centos2.vmconf

		foreach( @vmstatus ) {
			# delete leading/trailing whitespace
			s/^\s+|\s+$//g;
			if( $_ eq $vcname ) {
				# this vm is already registered
				# return true
				return 1;
			}
		}
	
	# return false
	return 0;
}

#List all running VMs
#arguments: 1) --list
sub list
{

	!system $vmrun_prog, "--list"
		or printerror "Can't execute the command: '$rockscmd_prog' --list";
}

#Check if rocks command line tools are installed
sub check
{

	!system $vmrun_prog, "--list"
		or printerror "Can't execute $vmrun_prog";

	!system $rockscmd_prog
		or printerror "Can't execute $rockscmd_prog";
}

sub register
{

}

sub unregister
{

}

sub fprint
{
	open(my $fh, '>>', $perllog) or die "Could not open $perllog";
	print $fh $_[0], "\n";
	close $fh;
}

sub save_to_file{
# filename, content
        my $filename = $_[0];
        my $content = $_[1];
        open(my $fh, '>', $filename) or die "Could not open file '$filename' $!";
        print $fh $content;
        close $fh;
}


sub getvmpid
{
	fprint("Get vcname from $vminfofile");
	
	open INFO,  $vminfofile or die;
	my $frontend="";
	while (my $infoline=<INFO>) {
   		chomp($infoline);
   		(my $k,my $v) = split /=/, $infoline;
   		$k =~ s/^\s+|\s+$//g;
   		$v =~ s/^\s+|\s+$//g;
   		if($k eq "Frontend"){
			$frontend=$v;
		}
		next;
	}
	my $psout=`/bin/ps -ef|grep $frontend | grep -v grep`;
	chomp($psout);
	my $pid = "";
	$pid=(split( /\s+/, $psout))[1];
	fprint("getpid: PID=$pid\n");
	return $pid;
}

sub status
{
#status      [vmconf]   Show the status of a VM
	# If a second argument is passed, then we should print our results
	# to stdout. Otherwise, just return the current status.
	my $print_result = undef;
	if ( defined($_[1]) ) {
		$print_result = $_[1];
	}

	my $output_status = "Stopped";	# default status

	
#	my $vmpid = getvmpid($vmconf);
#	if( defined($print_result) ) {
#		if( $vmpid ne "") {
#			$output_status="Running";
#			print OUTPUT "STATUS=$output_status\n";	
#			print OUTPUT "PID=$vmpid\n";
#		}
#		print OUTPUT "STATUS=$output_status\n";
#	}

        open INFO,  $vminfofile or die;
        my $frontend="";
        while (my $infoline=<INFO>) {
                chomp($infoline);
                (my $k,my $v) = split /=/, $infoline;
                $k =~ s/^\s+|\s+$//g;
                $v =~ s/^\s+|\s+$//g;
                if($k eq "Frontend"){
                        $frontend=$v;
                }
                next;
        }
	my $rocks_status=rocks_status($frontend);
	
	if($rocks_status eq "active"){
		$output_status="Running";
	}else{
		$output_status="Stopped";
	}
	
	if( defined($print_result) ) {
		print OUTPUT "STATUS=$output_status\n";	
	}

	return $output_status;
}

sub rocks_status
{
#rocks status [hostname]	
	my $hostname = $_[0];
	my $command="ssh -l root localhost rocks list cluster status=true";
	my $out = `$command`;
	my $status="";
	while($out =~ /([^\n]+)\n?/g){
	        my $line = $1;
        	if($1 =~ m/$hostname/){
        		$status=(split( /\s+/, $line))[-1];
		}
	}
	fprint("$status\n");
	return $status
}

sub pidofvm
{
#getpid      [vmconfig]   Print PID of VM
	printverbose "pidofvm is called";
	my $vmconfig = checkvmconfig($_[0]);

	# Get status

	# Get pid of main process of this VM
	my $vmpid = getvmpid($vmconfig);
	print OUTPUT "PID=$vmpid\n";
}

sub getvminfo
{
	print OUTPUT "FIXME:GET_VM_INFO\n";

}

sub start
{
#start       [vmconfig]	Start a VM
	printverbose "start is called";

	my $vmconfig = checkvmconfig($_[0]);

	open FILE1, $vmconfig or die;
	my %hash;
	while (my $line=<FILE1>) {
	   chomp($line);
	   next if /^\s*(#.*)?$line/;
	   (my $key,my $value) = split /=/, $line;
	   $key =~ s/^\s+|\s+$//g;
	   $value =~ s/^\s+|\s+$//g;
	   $hash{$key} = $value;
	}
	
	my $command_start=$vmrun_prog;
	my $logfile;	
	$command_start = join " ",
                $command_start,
                "--basepath $hash{basepath}",
                "--num_cpus $hash{num_cores}",
                "--key $hash{key}",
                "--vcname $hash{vcname}";
	if (exists $hash{logfile}){
		$logfile=$hash{logfile};
	}else{
		$logfile="pragma_boot.log";
	}

## The idea here is to let pragma_boot script output a log file when ssh to root account, 
## and `cat` that log file so that ssh command can return the cat results.
## I wanted to name the remote log file differently. 
## But I was wrong, the pragma_boot actually has a fixed log file: pragma_boot.log
	my $millisec=`date +%s.%N`;
	$millisec =~ s/^\s+|\s+$//g;
	my $remotedir = "/tmp/".$millisec;
#	$remotelog="/tmp/".$remotelog;
#	$command_start = join " ", $command_start, ">", $remotelog, "2>&1";
#	$command_start = join " ", $command_start, ";", "/bin/cat", $remotelog;

        $command_start = join " ", $command_start, ";", "/bin/cat pragma_boot.log";
	fprint("Start Command: $command_start");

#	!system $command_start
#		or printerror "Can't create vm with $vmconfig";
#

my $logcontent = `ssh -l root localhost "/bin/mkdir $remotedir; cd $remotedir; $command_start"`;
save_to_file($logfile, $logcontent);


open LOG,  $logfile or die;
my $frontend="";
my $compute="";
while (my $logline=<LOG>) {
   chomp($logline);
   if($logline =~ /created frontend VM/){
        (my $k1,my $v1) = split /:/, $logline;
        $v1 =~ s/^\s+|\s+$//g;
        $frontend=$v1;
   }
   if($logline =~ /created compute VM/){
        (my $k2,my $v2) = split /:/, $logline;
        $v2 =~ s/^\s+|\s+$//g;
        if($compute eq ""){
                $compute=$v2;
        }else{
                $compute=join ",", $compute, $v2;
        }
   }
   next
}

print OUTPUT "Frontend=$frontend", "\n";
print OUTPUT "Compute=$compute", "\n";

print "Frontend=$frontend", "\n";
print "Compute=$compute", "\n";

fprint("Frontend=$frontend");
fprint("Compute=$compute");

close LOG;


my $psout=`/bin/ps -ef|grep $frontend | grep -v grep`;
chomp($psout);
my $pid = (split( /\s+/, $psout))[1];
print OUTPUT "PID=$pid\n";

open(my $fh, '>', $vminfofile) or die "Could not open file '$vminfofile' $!";
print $fh "Frontend=$frontend", "\n";
print $fh "Compute=$compute", "\n";
print $fh "PID=$pid\n";
close $fh;

}

sub stop
{
#Shutdown a VM
	printverbose "stop is called";
	open INFO,  $vminfofile or die;
        my $frontend="";
        my $compute="";
        while (my $infoline=<INFO>) {
                chomp($infoline);
                (my $k,my $v) = split /=/, $infoline;
                $k =~ s/^\s+|\s+$//g;
                $v =~ s/^\s+|\s+$//g;
                if($k eq "Frontend"){
                        $frontend=$v;
                }
                if($k eq "Compute"){
                        $compute=$v;
                }
                next;
        }
        my $hosts= join "," , $frontend, $compute;
        print $hosts,"\n";
        while($hosts =~ /([^,]+),?/g){
		my $host=$1;
		$host =~ s/^\s+|\s+$//g;
                if(rocks_status($host) eq "active"){
                        fprint("STOPING $host");
			`ssh -l root localhost rocks stop host vm $host`;
                }
        }

}

sub killvm
{
#FIXME
}

sub suspend
{
#Suspend a VM
	printverbose "suspend is called";
	my $vmconfig = checkvmconfig($_[0]);
}

sub resume
{
}

sub snapshot
{
}

sub commit
{
}

sub revert
{
}

sub createiso
{
}

sub createconfig {}

if ($#ARGV < 0 || $ARGV[0] eq "--help") { usage(); }
elsif ($ARGV[0] eq "list")	{ list(); }
elsif ($ARGV[0] eq "check")	{ check(); }
elsif ($ARGV[0] eq "register")	{ register($ARGV[1]); }
elsif ($ARGV[0] eq "unregister"){ unregister($ARGV[1]); }
elsif ($ARGV[0] eq "start")	{ start($ARGV[1]); }
elsif ($ARGV[0] eq "stop")	{ stop($ARGV[1]); }
elsif ($ARGV[0] eq "killvm")	{ killvm($ARGV[1]); }
elsif ($ARGV[0] eq "suspend")	{ suspend($ARGV[1]); }
elsif ($ARGV[0] eq "resume")	{ resume($ARGV[1]); }
elsif ($ARGV[0] eq "status")	{ status($ARGV[1], 1); }
elsif ($ARGV[0] eq "getpid")	{ pidofvm($ARGV[1]); }
elsif ($ARGV[0] eq "getvminfo")	{ getvminfo($ARGV[1]); }
elsif ($ARGV[0] eq "snapshot")	{ snapshot($ARGV[1]); }
elsif ($ARGV[0] eq "commit")	{ commit($ARGV[1]); }
elsif ($ARGV[0] eq "revert")	{ revert($ARGV[1]); }
elsif ($ARGV[0] eq "createiso")	{ createiso($ARGV[1], $ARGV[2]); }
elsif ($ARGV[0] eq "createconfig")	{ createconfig($ARGV[1]); }
else { printerror "Unknown command \"$ARGV[0]\". See $progname --help."; }
